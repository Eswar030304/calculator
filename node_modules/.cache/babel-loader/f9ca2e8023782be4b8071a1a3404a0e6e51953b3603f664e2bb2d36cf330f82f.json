{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { config } from './configReadonly.js';\nimport { createChainClass, createNode, createObjectNode, createRangeNode, createRelationalNode, createReviver, createSymbolNode, createAccessorNode, createAssignmentNode, createBlockNode, createChain, createConditionalNode, createFunctionNode, createIndexNode, createOperatorNode, createConstantNode, createFunctionAssignmentNode, createParenthesisNode, createArrayNode, createSimplifyConstant, createParse, createResolve, createSimplifyCore, createCompile, createEvaluate, createHelpClass, createParserClass, createSimplify, createDerivative, createRationalize, createHelp, createParser, createCumSumTransform, createApplyTransform, createFilterTransform, createForEachTransform, createMapTransform, createMeanTransform, createSubsetTransform, createRangeTransform, createStdTransform, createSumTransform, createMaxTransform, createMinTransform, createVarianceTransform } from '../factoriesNumber.js';\nimport { e, _false, index, _Infinity, LN10, LOG10E, matrix, _NaN, _null, phi, Range, replacer, ResultSet, SQRT1_2,\n// eslint-disable-line camelcase\nsubset, tau, typed, unaryPlus, version, xor, abs, acos, acot, acsc, add, and, asec, asin, atan, atanh, bitAnd, bitOr, boolean, cbrt, combinations, compare, compareText, cos, cot, csc, cube, divide, equalScalar, erf, exp, filter, forEach, format, gamma, isInteger, isNegative, isPositive, isZero, LOG2E, largerEq, leftShift, log, log1p, map, mean, mod, multiply, not, number, or, pi, pow, random, rightLogShift, SQRT2, sech, sin, size, smallerEq, square, string, subtract, tanh, typeOf, unequal, xgcd, acoth, addScalar, asech, bitNot, combinationsWithRep, cosh, csch, divideScalar, equalText, expm1, isNumeric, LN2, lcm, log10, multiplyScalar, nthRoot, pickRandom, randomInt, rightArithShift, sec, sinh, sqrt, tan, unaryMinus, acosh, apply, asinh, bitXor, clone, coth, equal, factorial, hasNumericValue, isNaN, larger, log2, mode, norm, partitionSelect, print, round, smaller, stirlingS2, _true, variance, zeta, acsch, atan2, catalan, compareNatural, composition, cumsum, floor, hypot, lgamma, median, multinomial, permutations, quantileSeq, sign, std, ceil, deepEqual, fix, isPrime, numeric, prod, bellNumbers, gcd, mad, range, sum, corr, max, min } from './pureFunctionsNumber.generated.js';\nvar math = {}; // NOT pure!\nvar mathWithTransform = {}; // NOT pure!\nvar classes = {}; // NOT pure!\n\nexport var Chain = createChainClass({\n  math,\n  typed\n});\nexport var Node = createNode({\n  mathWithTransform\n});\nexport var ObjectNode = createObjectNode({\n  Node\n});\nexport var RangeNode = createRangeNode({\n  Node\n});\nexport var RelationalNode = createRelationalNode({\n  Node\n});\nexport var reviver = createReviver({\n  classes\n});\nexport var SymbolNode = createSymbolNode({\n  Node,\n  math\n});\nexport var AccessorNode = createAccessorNode({\n  Node,\n  subset\n});\nexport var AssignmentNode = createAssignmentNode({\n  matrix,\n  Node,\n  subset\n});\nexport var BlockNode = createBlockNode({\n  Node,\n  ResultSet\n});\nexport var chain = createChain({\n  Chain,\n  typed\n});\nexport var ConditionalNode = createConditionalNode({\n  Node\n});\nexport var FunctionNode = createFunctionNode({\n  Node,\n  SymbolNode,\n  math\n});\nexport var IndexNode = createIndexNode({\n  Node,\n  size\n});\nexport var OperatorNode = createOperatorNode({\n  Node\n});\nexport var ConstantNode = createConstantNode({\n  Node\n});\nexport var FunctionAssignmentNode = createFunctionAssignmentNode({\n  Node,\n  typed\n});\nexport var ParenthesisNode = createParenthesisNode({\n  Node\n});\nexport var ArrayNode = createArrayNode({\n  Node\n});\nexport var simplifyConstant = createSimplifyConstant({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  SymbolNode,\n  config,\n  mathWithTransform,\n  matrix,\n  typed\n});\nexport var parse = createParse({\n  AccessorNode,\n  ArrayNode,\n  AssignmentNode,\n  BlockNode,\n  ConditionalNode,\n  ConstantNode,\n  FunctionAssignmentNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  RangeNode,\n  RelationalNode,\n  SymbolNode,\n  config,\n  numeric,\n  typed\n});\nexport var resolve = createResolve({\n  ConstantNode,\n  FunctionNode,\n  OperatorNode,\n  ParenthesisNode,\n  parse,\n  typed\n});\nexport var simplifyCore = createSimplifyCore({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  divide,\n  equal,\n  isZero,\n  multiply,\n  parse,\n  pow,\n  subtract,\n  typed\n});\nexport var compile = createCompile({\n  parse,\n  typed\n});\nexport var evaluate = createEvaluate({\n  parse,\n  typed\n});\nexport var Help = createHelpClass({\n  parse\n});\nexport var Parser = createParserClass({\n  evaluate\n});\nexport var simplify = createSimplify({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  config,\n  divide,\n  equal,\n  isZero,\n  mathWithTransform,\n  matrix,\n  multiply,\n  parse,\n  pow,\n  resolve,\n  simplifyConstant,\n  simplifyCore,\n  subtract,\n  typed\n});\nexport var derivative = createDerivative({\n  ConstantNode,\n  FunctionNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  config,\n  equal,\n  isZero,\n  numeric,\n  parse,\n  simplify,\n  typed\n});\nexport var rationalize = createRationalize({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  config,\n  divide,\n  equal,\n  isZero,\n  mathWithTransform,\n  matrix,\n  multiply,\n  parse,\n  pow,\n  simplify,\n  simplifyConstant,\n  simplifyCore,\n  subtract,\n  typed\n});\nexport var help = createHelp({\n  Help,\n  mathWithTransform,\n  typed\n});\nexport var parser = createParser({\n  Parser,\n  typed\n});\n_extends(math, {\n  e,\n  false: _false,\n  index,\n  Infinity: _Infinity,\n  LN10,\n  LOG10E,\n  matrix,\n  NaN: _NaN,\n  null: _null,\n  phi,\n  replacer,\n  SQRT1_2,\n  subset,\n  tau,\n  typed,\n  unaryPlus,\n  'E': e,\n  version,\n  xor,\n  abs,\n  acos,\n  acot,\n  acsc,\n  add,\n  and,\n  asec,\n  asin,\n  atan,\n  atanh,\n  bitAnd,\n  bitOr,\n  boolean,\n  cbrt,\n  combinations,\n  compare,\n  compareText,\n  cos,\n  cot,\n  csc,\n  cube,\n  divide,\n  equalScalar,\n  erf,\n  exp,\n  filter,\n  forEach,\n  format,\n  gamma,\n  isInteger,\n  isNegative,\n  isPositive,\n  isZero,\n  LOG2E,\n  largerEq,\n  leftShift,\n  log,\n  log1p,\n  map,\n  mean,\n  mod,\n  multiply,\n  not,\n  number,\n  or,\n  pi,\n  pow,\n  random,\n  reviver,\n  rightLogShift,\n  SQRT2,\n  sech,\n  sin,\n  size,\n  smallerEq,\n  square,\n  string,\n  subtract,\n  tanh,\n  typeOf,\n  unequal,\n  xgcd,\n  acoth,\n  addScalar,\n  asech,\n  bitNot,\n  chain,\n  combinationsWithRep,\n  cosh,\n  csch,\n  divideScalar,\n  equalText,\n  expm1,\n  isNumeric,\n  LN2,\n  lcm,\n  log10,\n  multiplyScalar,\n  nthRoot,\n  pickRandom,\n  randomInt,\n  rightArithShift,\n  sec,\n  sinh,\n  sqrt,\n  tan,\n  unaryMinus,\n  acosh,\n  apply,\n  asinh,\n  bitXor,\n  clone,\n  coth,\n  equal,\n  factorial,\n  hasNumericValue,\n  isNaN,\n  larger,\n  log2,\n  mode,\n  norm,\n  partitionSelect,\n  print,\n  round,\n  smaller,\n  stirlingS2,\n  true: _true,\n  variance,\n  zeta,\n  acsch,\n  atan2,\n  catalan,\n  compareNatural,\n  composition,\n  cumsum,\n  floor,\n  hypot,\n  lgamma,\n  median,\n  multinomial,\n  permutations,\n  quantileSeq,\n  sign,\n  std,\n  'PI': pi,\n  ceil,\n  deepEqual,\n  fix,\n  isPrime,\n  numeric,\n  prod,\n  simplifyConstant,\n  bellNumbers,\n  gcd,\n  mad,\n  range,\n  sum,\n  corr,\n  max,\n  parse,\n  resolve,\n  simplifyCore,\n  compile,\n  evaluate,\n  simplify,\n  derivative,\n  min,\n  rationalize,\n  help,\n  parser,\n  config\n});\n_extends(mathWithTransform, math, {\n  cumsum: createCumSumTransform({\n    add,\n    typed,\n    unaryPlus\n  }),\n  apply: createApplyTransform({\n    isInteger,\n    typed\n  }),\n  filter: createFilterTransform({\n    typed\n  }),\n  forEach: createForEachTransform({\n    typed\n  }),\n  map: createMapTransform({\n    typed\n  }),\n  mean: createMeanTransform({\n    add,\n    divide,\n    typed\n  }),\n  subset: createSubsetTransform({}),\n  range: createRangeTransform({\n    matrix,\n    add,\n    config,\n    isPositive,\n    larger,\n    largerEq,\n    smaller,\n    smallerEq,\n    typed\n  }),\n  std: createStdTransform({\n    map,\n    sqrt,\n    typed,\n    variance\n  }),\n  sum: createSumTransform({\n    add,\n    config,\n    numeric,\n    typed\n  }),\n  max: createMaxTransform({\n    config,\n    larger,\n    numeric,\n    typed\n  }),\n  min: createMinTransform({\n    config,\n    numeric,\n    smaller,\n    typed\n  }),\n  variance: createVarianceTransform({\n    add,\n    apply,\n    divide,\n    isNaN,\n    multiply,\n    subtract,\n    typed\n  })\n});\n_extends(classes, {\n  Range,\n  ResultSet,\n  Chain,\n  Node,\n  ObjectNode,\n  RangeNode,\n  RelationalNode,\n  SymbolNode,\n  AccessorNode,\n  AssignmentNode,\n  BlockNode,\n  ConditionalNode,\n  FunctionNode,\n  IndexNode,\n  OperatorNode,\n  ConstantNode,\n  FunctionAssignmentNode,\n  ParenthesisNode,\n  ArrayNode,\n  Help,\n  Parser\n});\nChain.createProxy(math);\nexport { embeddedDocs as docs } from '../expression/embeddedDocs/embeddedDocs.js';","map":{"version":3,"names":["_extends","config","createChainClass","createNode","createObjectNode","createRangeNode","createRelationalNode","createReviver","createSymbolNode","createAccessorNode","createAssignmentNode","createBlockNode","createChain","createConditionalNode","createFunctionNode","createIndexNode","createOperatorNode","createConstantNode","createFunctionAssignmentNode","createParenthesisNode","createArrayNode","createSimplifyConstant","createParse","createResolve","createSimplifyCore","createCompile","createEvaluate","createHelpClass","createParserClass","createSimplify","createDerivative","createRationalize","createHelp","createParser","createCumSumTransform","createApplyTransform","createFilterTransform","createForEachTransform","createMapTransform","createMeanTransform","createSubsetTransform","createRangeTransform","createStdTransform","createSumTransform","createMaxTransform","createMinTransform","createVarianceTransform","e","_false","index","_Infinity","LN10","LOG10E","matrix","_NaN","_null","phi","Range","replacer","ResultSet","SQRT1_2","subset","tau","typed","unaryPlus","version","xor","abs","acos","acot","acsc","add","and","asec","asin","atan","atanh","bitAnd","bitOr","boolean","cbrt","combinations","compare","compareText","cos","cot","csc","cube","divide","equalScalar","erf","exp","filter","forEach","format","gamma","isInteger","isNegative","isPositive","isZero","LOG2E","largerEq","leftShift","log","log1p","map","mean","mod","multiply","not","number","or","pi","pow","random","rightLogShift","SQRT2","sech","sin","size","smallerEq","square","string","subtract","tanh","typeOf","unequal","xgcd","acoth","addScalar","asech","bitNot","combinationsWithRep","cosh","csch","divideScalar","equalText","expm1","isNumeric","LN2","lcm","log10","multiplyScalar","nthRoot","pickRandom","randomInt","rightArithShift","sec","sinh","sqrt","tan","unaryMinus","acosh","apply","asinh","bitXor","clone","coth","equal","factorial","hasNumericValue","isNaN","larger","log2","mode","norm","partitionSelect","print","round","smaller","stirlingS2","_true","variance","zeta","acsch","atan2","catalan","compareNatural","composition","cumsum","floor","hypot","lgamma","median","multinomial","permutations","quantileSeq","sign","std","ceil","deepEqual","fix","isPrime","numeric","prod","bellNumbers","gcd","mad","range","sum","corr","max","min","math","mathWithTransform","classes","Chain","Node","ObjectNode","RangeNode","RelationalNode","reviver","SymbolNode","AccessorNode","AssignmentNode","BlockNode","chain","ConditionalNode","FunctionNode","IndexNode","OperatorNode","ConstantNode","FunctionAssignmentNode","ParenthesisNode","ArrayNode","simplifyConstant","parse","resolve","simplifyCore","compile","evaluate","Help","Parser","simplify","derivative","rationalize","help","parser","false","Infinity","NaN","null","true","createProxy","embeddedDocs","docs"],"sources":["/Users/eswar/MERN/node_modules/mathjs/lib/esm/entry/impureFunctionsNumber.generated.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\n/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { config } from './configReadonly.js';\nimport { createChainClass, createNode, createObjectNode, createRangeNode, createRelationalNode, createReviver, createSymbolNode, createAccessorNode, createAssignmentNode, createBlockNode, createChain, createConditionalNode, createFunctionNode, createIndexNode, createOperatorNode, createConstantNode, createFunctionAssignmentNode, createParenthesisNode, createArrayNode, createSimplifyConstant, createParse, createResolve, createSimplifyCore, createCompile, createEvaluate, createHelpClass, createParserClass, createSimplify, createDerivative, createRationalize, createHelp, createParser, createCumSumTransform, createApplyTransform, createFilterTransform, createForEachTransform, createMapTransform, createMeanTransform, createSubsetTransform, createRangeTransform, createStdTransform, createSumTransform, createMaxTransform, createMinTransform, createVarianceTransform } from '../factoriesNumber.js';\nimport { e, _false, index, _Infinity, LN10, LOG10E, matrix, _NaN, _null, phi, Range, replacer, ResultSet, SQRT1_2,\n// eslint-disable-line camelcase\nsubset, tau, typed, unaryPlus, version, xor, abs, acos, acot, acsc, add, and, asec, asin, atan, atanh, bitAnd, bitOr, boolean, cbrt, combinations, compare, compareText, cos, cot, csc, cube, divide, equalScalar, erf, exp, filter, forEach, format, gamma, isInteger, isNegative, isPositive, isZero, LOG2E, largerEq, leftShift, log, log1p, map, mean, mod, multiply, not, number, or, pi, pow, random, rightLogShift, SQRT2, sech, sin, size, smallerEq, square, string, subtract, tanh, typeOf, unequal, xgcd, acoth, addScalar, asech, bitNot, combinationsWithRep, cosh, csch, divideScalar, equalText, expm1, isNumeric, LN2, lcm, log10, multiplyScalar, nthRoot, pickRandom, randomInt, rightArithShift, sec, sinh, sqrt, tan, unaryMinus, acosh, apply, asinh, bitXor, clone, coth, equal, factorial, hasNumericValue, isNaN, larger, log2, mode, norm, partitionSelect, print, round, smaller, stirlingS2, _true, variance, zeta, acsch, atan2, catalan, compareNatural, composition, cumsum, floor, hypot, lgamma, median, multinomial, permutations, quantileSeq, sign, std, ceil, deepEqual, fix, isPrime, numeric, prod, bellNumbers, gcd, mad, range, sum, corr, max, min } from './pureFunctionsNumber.generated.js';\nvar math = {}; // NOT pure!\nvar mathWithTransform = {}; // NOT pure!\nvar classes = {}; // NOT pure!\n\nexport var Chain = createChainClass({\n  math,\n  typed\n});\nexport var Node = createNode({\n  mathWithTransform\n});\nexport var ObjectNode = createObjectNode({\n  Node\n});\nexport var RangeNode = createRangeNode({\n  Node\n});\nexport var RelationalNode = createRelationalNode({\n  Node\n});\nexport var reviver = createReviver({\n  classes\n});\nexport var SymbolNode = createSymbolNode({\n  Node,\n  math\n});\nexport var AccessorNode = createAccessorNode({\n  Node,\n  subset\n});\nexport var AssignmentNode = createAssignmentNode({\n  matrix,\n  Node,\n  subset\n});\nexport var BlockNode = createBlockNode({\n  Node,\n  ResultSet\n});\nexport var chain = createChain({\n  Chain,\n  typed\n});\nexport var ConditionalNode = createConditionalNode({\n  Node\n});\nexport var FunctionNode = createFunctionNode({\n  Node,\n  SymbolNode,\n  math\n});\nexport var IndexNode = createIndexNode({\n  Node,\n  size\n});\nexport var OperatorNode = createOperatorNode({\n  Node\n});\nexport var ConstantNode = createConstantNode({\n  Node\n});\nexport var FunctionAssignmentNode = createFunctionAssignmentNode({\n  Node,\n  typed\n});\nexport var ParenthesisNode = createParenthesisNode({\n  Node\n});\nexport var ArrayNode = createArrayNode({\n  Node\n});\nexport var simplifyConstant = createSimplifyConstant({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  SymbolNode,\n  config,\n  mathWithTransform,\n  matrix,\n  typed\n});\nexport var parse = createParse({\n  AccessorNode,\n  ArrayNode,\n  AssignmentNode,\n  BlockNode,\n  ConditionalNode,\n  ConstantNode,\n  FunctionAssignmentNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  RangeNode,\n  RelationalNode,\n  SymbolNode,\n  config,\n  numeric,\n  typed\n});\nexport var resolve = createResolve({\n  ConstantNode,\n  FunctionNode,\n  OperatorNode,\n  ParenthesisNode,\n  parse,\n  typed\n});\nexport var simplifyCore = createSimplifyCore({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  divide,\n  equal,\n  isZero,\n  multiply,\n  parse,\n  pow,\n  subtract,\n  typed\n});\nexport var compile = createCompile({\n  parse,\n  typed\n});\nexport var evaluate = createEvaluate({\n  parse,\n  typed\n});\nexport var Help = createHelpClass({\n  parse\n});\nexport var Parser = createParserClass({\n  evaluate\n});\nexport var simplify = createSimplify({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  config,\n  divide,\n  equal,\n  isZero,\n  mathWithTransform,\n  matrix,\n  multiply,\n  parse,\n  pow,\n  resolve,\n  simplifyConstant,\n  simplifyCore,\n  subtract,\n  typed\n});\nexport var derivative = createDerivative({\n  ConstantNode,\n  FunctionNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  config,\n  equal,\n  isZero,\n  numeric,\n  parse,\n  simplify,\n  typed\n});\nexport var rationalize = createRationalize({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  config,\n  divide,\n  equal,\n  isZero,\n  mathWithTransform,\n  matrix,\n  multiply,\n  parse,\n  pow,\n  simplify,\n  simplifyConstant,\n  simplifyCore,\n  subtract,\n  typed\n});\nexport var help = createHelp({\n  Help,\n  mathWithTransform,\n  typed\n});\nexport var parser = createParser({\n  Parser,\n  typed\n});\n_extends(math, {\n  e,\n  false: _false,\n  index,\n  Infinity: _Infinity,\n  LN10,\n  LOG10E,\n  matrix,\n  NaN: _NaN,\n  null: _null,\n  phi,\n  replacer,\n  SQRT1_2,\n  subset,\n  tau,\n  typed,\n  unaryPlus,\n  'E': e,\n  version,\n  xor,\n  abs,\n  acos,\n  acot,\n  acsc,\n  add,\n  and,\n  asec,\n  asin,\n  atan,\n  atanh,\n  bitAnd,\n  bitOr,\n  boolean,\n  cbrt,\n  combinations,\n  compare,\n  compareText,\n  cos,\n  cot,\n  csc,\n  cube,\n  divide,\n  equalScalar,\n  erf,\n  exp,\n  filter,\n  forEach,\n  format,\n  gamma,\n  isInteger,\n  isNegative,\n  isPositive,\n  isZero,\n  LOG2E,\n  largerEq,\n  leftShift,\n  log,\n  log1p,\n  map,\n  mean,\n  mod,\n  multiply,\n  not,\n  number,\n  or,\n  pi,\n  pow,\n  random,\n  reviver,\n  rightLogShift,\n  SQRT2,\n  sech,\n  sin,\n  size,\n  smallerEq,\n  square,\n  string,\n  subtract,\n  tanh,\n  typeOf,\n  unequal,\n  xgcd,\n  acoth,\n  addScalar,\n  asech,\n  bitNot,\n  chain,\n  combinationsWithRep,\n  cosh,\n  csch,\n  divideScalar,\n  equalText,\n  expm1,\n  isNumeric,\n  LN2,\n  lcm,\n  log10,\n  multiplyScalar,\n  nthRoot,\n  pickRandom,\n  randomInt,\n  rightArithShift,\n  sec,\n  sinh,\n  sqrt,\n  tan,\n  unaryMinus,\n  acosh,\n  apply,\n  asinh,\n  bitXor,\n  clone,\n  coth,\n  equal,\n  factorial,\n  hasNumericValue,\n  isNaN,\n  larger,\n  log2,\n  mode,\n  norm,\n  partitionSelect,\n  print,\n  round,\n  smaller,\n  stirlingS2,\n  true: _true,\n  variance,\n  zeta,\n  acsch,\n  atan2,\n  catalan,\n  compareNatural,\n  composition,\n  cumsum,\n  floor,\n  hypot,\n  lgamma,\n  median,\n  multinomial,\n  permutations,\n  quantileSeq,\n  sign,\n  std,\n  'PI': pi,\n  ceil,\n  deepEqual,\n  fix,\n  isPrime,\n  numeric,\n  prod,\n  simplifyConstant,\n  bellNumbers,\n  gcd,\n  mad,\n  range,\n  sum,\n  corr,\n  max,\n  parse,\n  resolve,\n  simplifyCore,\n  compile,\n  evaluate,\n  simplify,\n  derivative,\n  min,\n  rationalize,\n  help,\n  parser,\n  config\n});\n_extends(mathWithTransform, math, {\n  cumsum: createCumSumTransform({\n    add,\n    typed,\n    unaryPlus\n  }),\n  apply: createApplyTransform({\n    isInteger,\n    typed\n  }),\n  filter: createFilterTransform({\n    typed\n  }),\n  forEach: createForEachTransform({\n    typed\n  }),\n  map: createMapTransform({\n    typed\n  }),\n  mean: createMeanTransform({\n    add,\n    divide,\n    typed\n  }),\n  subset: createSubsetTransform({}),\n  range: createRangeTransform({\n    matrix,\n    add,\n    config,\n    isPositive,\n    larger,\n    largerEq,\n    smaller,\n    smallerEq,\n    typed\n  }),\n  std: createStdTransform({\n    map,\n    sqrt,\n    typed,\n    variance\n  }),\n  sum: createSumTransform({\n    add,\n    config,\n    numeric,\n    typed\n  }),\n  max: createMaxTransform({\n    config,\n    larger,\n    numeric,\n    typed\n  }),\n  min: createMinTransform({\n    config,\n    numeric,\n    smaller,\n    typed\n  }),\n  variance: createVarianceTransform({\n    add,\n    apply,\n    divide,\n    isNaN,\n    multiply,\n    subtract,\n    typed\n  })\n});\n_extends(classes, {\n  Range,\n  ResultSet,\n  Chain,\n  Node,\n  ObjectNode,\n  RangeNode,\n  RelationalNode,\n  SymbolNode,\n  AccessorNode,\n  AssignmentNode,\n  BlockNode,\n  ConditionalNode,\n  FunctionNode,\n  IndexNode,\n  OperatorNode,\n  ConstantNode,\n  FunctionAssignmentNode,\n  ParenthesisNode,\n  ArrayNode,\n  Help,\n  Parser\n});\nChain.createProxy(math);\nexport { embeddedDocs as docs } from '../expression/embeddedDocs/embeddedDocs.js';"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,gCAAgC;AACrD;AACA;AACA;AACA;AACA,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,gBAAgB,EAAEC,UAAU,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,kBAAkB,EAAEC,oBAAoB,EAAEC,eAAe,EAAEC,WAAW,EAAEC,qBAAqB,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,4BAA4B,EAAEC,qBAAqB,EAAEC,eAAe,EAAEC,sBAAsB,EAAEC,WAAW,EAAEC,aAAa,EAAEC,kBAAkB,EAAEC,aAAa,EAAEC,cAAc,EAAEC,eAAe,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,YAAY,EAAEC,qBAAqB,EAAEC,oBAAoB,EAAEC,qBAAqB,EAAEC,sBAAsB,EAAEC,kBAAkB,EAAEC,mBAAmB,EAAEC,qBAAqB,EAAEC,oBAAoB,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,uBAAuB,QAAQ,uBAAuB;AACr4B,SAASC,CAAC,EAAEC,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,OAAO;AACjH;AACAC,MAAM,EAAEC,GAAG,EAAEC,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAEC,YAAY,EAAEC,OAAO,EAAEC,WAAW,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,WAAW,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,GAAG,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,EAAEC,GAAG,EAAEC,MAAM,EAAEC,aAAa,EAAEC,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,IAAI,EAAEC,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,mBAAmB,EAAEC,IAAI,EAAEC,IAAI,EAAEC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAAEC,SAAS,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEC,cAAc,EAAEC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEC,eAAe,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEC,SAAS,EAAEC,eAAe,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,eAAe,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,UAAU,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,cAAc,EAAEC,WAAW,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,SAAS,EAAEC,GAAG,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,WAAW,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,QAAQ,oCAAoC;AACvqC,IAAIC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AACf,IAAIC,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5B,IAAIC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;;AAElB,OAAO,IAAIC,KAAK,GAAG5M,gBAAgB,CAAC;EAClCyM,IAAI;EACJ5I;AACF,CAAC,CAAC;AACF,OAAO,IAAIgJ,IAAI,GAAG5M,UAAU,CAAC;EAC3ByM;AACF,CAAC,CAAC;AACF,OAAO,IAAII,UAAU,GAAG5M,gBAAgB,CAAC;EACvC2M;AACF,CAAC,CAAC;AACF,OAAO,IAAIE,SAAS,GAAG5M,eAAe,CAAC;EACrC0M;AACF,CAAC,CAAC;AACF,OAAO,IAAIG,cAAc,GAAG5M,oBAAoB,CAAC;EAC/CyM;AACF,CAAC,CAAC;AACF,OAAO,IAAII,OAAO,GAAG5M,aAAa,CAAC;EACjCsM;AACF,CAAC,CAAC;AACF,OAAO,IAAIO,UAAU,GAAG5M,gBAAgB,CAAC;EACvCuM,IAAI;EACJJ;AACF,CAAC,CAAC;AACF,OAAO,IAAIU,YAAY,GAAG5M,kBAAkB,CAAC;EAC3CsM,IAAI;EACJlJ;AACF,CAAC,CAAC;AACF,OAAO,IAAIyJ,cAAc,GAAG5M,oBAAoB,CAAC;EAC/C2C,MAAM;EACN0J,IAAI;EACJlJ;AACF,CAAC,CAAC;AACF,OAAO,IAAI0J,SAAS,GAAG5M,eAAe,CAAC;EACrCoM,IAAI;EACJpJ;AACF,CAAC,CAAC;AACF,OAAO,IAAI6J,KAAK,GAAG5M,WAAW,CAAC;EAC7BkM,KAAK;EACL/I;AACF,CAAC,CAAC;AACF,OAAO,IAAI0J,eAAe,GAAG5M,qBAAqB,CAAC;EACjDkM;AACF,CAAC,CAAC;AACF,OAAO,IAAIW,YAAY,GAAG5M,kBAAkB,CAAC;EAC3CiM,IAAI;EACJK,UAAU;EACVT;AACF,CAAC,CAAC;AACF,OAAO,IAAIgB,SAAS,GAAG5M,eAAe,CAAC;EACrCgM,IAAI;EACJxF;AACF,CAAC,CAAC;AACF,OAAO,IAAIqG,YAAY,GAAG5M,kBAAkB,CAAC;EAC3C+L;AACF,CAAC,CAAC;AACF,OAAO,IAAIc,YAAY,GAAG5M,kBAAkB,CAAC;EAC3C8L;AACF,CAAC,CAAC;AACF,OAAO,IAAIe,sBAAsB,GAAG5M,4BAA4B,CAAC;EAC/D6L,IAAI;EACJhJ;AACF,CAAC,CAAC;AACF,OAAO,IAAIgK,eAAe,GAAG5M,qBAAqB,CAAC;EACjD4L;AACF,CAAC,CAAC;AACF,OAAO,IAAIiB,SAAS,GAAG5M,eAAe,CAAC;EACrC2L;AACF,CAAC,CAAC;AACF,OAAO,IAAIkB,gBAAgB,GAAG5M,sBAAsB,CAAC;EACnDgM,YAAY;EACZW,SAAS;EACTH,YAAY;EACZH,YAAY;EACZC,SAAS;EACTX,UAAU;EACVY,YAAY;EACZR,UAAU;EACVnN,MAAM;EACN2M,iBAAiB;EACjBvJ,MAAM;EACNU;AACF,CAAC,CAAC;AACF,OAAO,IAAImK,KAAK,GAAG5M,WAAW,CAAC;EAC7B+L,YAAY;EACZW,SAAS;EACTV,cAAc;EACdC,SAAS;EACTE,eAAe;EACfI,YAAY;EACZC,sBAAsB;EACtBJ,YAAY;EACZC,SAAS;EACTX,UAAU;EACVY,YAAY;EACZG,eAAe;EACfd,SAAS;EACTC,cAAc;EACdE,UAAU;EACVnN,MAAM;EACNgM,OAAO;EACPlI;AACF,CAAC,CAAC;AACF,OAAO,IAAIoK,OAAO,GAAG5M,aAAa,CAAC;EACjCsM,YAAY;EACZH,YAAY;EACZE,YAAY;EACZG,eAAe;EACfG,KAAK;EACLnK;AACF,CAAC,CAAC;AACF,OAAO,IAAIqK,YAAY,GAAG5M,kBAAkB,CAAC;EAC3C6L,YAAY;EACZW,SAAS;EACTH,YAAY;EACZH,YAAY;EACZC,SAAS;EACTX,UAAU;EACVY,YAAY;EACZG,eAAe;EACfX,UAAU;EACV7I,GAAG;EACHiB,MAAM;EACNsE,KAAK;EACL3D,MAAM;EACNS,QAAQ;EACRsH,KAAK;EACLjH,GAAG;EACHU,QAAQ;EACR5D;AACF,CAAC,CAAC;AACF,OAAO,IAAIsK,OAAO,GAAG5M,aAAa,CAAC;EACjCyM,KAAK;EACLnK;AACF,CAAC,CAAC;AACF,OAAO,IAAIuK,QAAQ,GAAG5M,cAAc,CAAC;EACnCwM,KAAK;EACLnK;AACF,CAAC,CAAC;AACF,OAAO,IAAIwK,IAAI,GAAG5M,eAAe,CAAC;EAChCuM;AACF,CAAC,CAAC;AACF,OAAO,IAAIM,MAAM,GAAG5M,iBAAiB,CAAC;EACpC0M;AACF,CAAC,CAAC;AACF,OAAO,IAAIG,QAAQ,GAAG5M,cAAc,CAAC;EACnCwL,YAAY;EACZW,SAAS;EACTH,YAAY;EACZH,YAAY;EACZC,SAAS;EACTX,UAAU;EACVY,YAAY;EACZG,eAAe;EACfX,UAAU;EACV7I,GAAG;EACHtE,MAAM;EACNuF,MAAM;EACNsE,KAAK;EACL3D,MAAM;EACNyG,iBAAiB;EACjBvJ,MAAM;EACNuD,QAAQ;EACRsH,KAAK;EACLjH,GAAG;EACHkH,OAAO;EACPF,gBAAgB;EAChBG,YAAY;EACZzG,QAAQ;EACR5D;AACF,CAAC,CAAC;AACF,OAAO,IAAI2K,UAAU,GAAG5M,gBAAgB,CAAC;EACvC+L,YAAY;EACZH,YAAY;EACZE,YAAY;EACZG,eAAe;EACfX,UAAU;EACVnN,MAAM;EACN6J,KAAK;EACL3D,MAAM;EACN8F,OAAO;EACPiC,KAAK;EACLO,QAAQ;EACR1K;AACF,CAAC,CAAC;AACF,OAAO,IAAI4K,WAAW,GAAG5M,iBAAiB,CAAC;EACzCsL,YAAY;EACZW,SAAS;EACTH,YAAY;EACZH,YAAY;EACZC,SAAS;EACTX,UAAU;EACVY,YAAY;EACZG,eAAe;EACfX,UAAU;EACV7I,GAAG;EACHtE,MAAM;EACNuF,MAAM;EACNsE,KAAK;EACL3D,MAAM;EACNyG,iBAAiB;EACjBvJ,MAAM;EACNuD,QAAQ;EACRsH,KAAK;EACLjH,GAAG;EACHwH,QAAQ;EACRR,gBAAgB;EAChBG,YAAY;EACZzG,QAAQ;EACR5D;AACF,CAAC,CAAC;AACF,OAAO,IAAI6K,IAAI,GAAG5M,UAAU,CAAC;EAC3BuM,IAAI;EACJ3B,iBAAiB;EACjB7I;AACF,CAAC,CAAC;AACF,OAAO,IAAI8K,MAAM,GAAG5M,YAAY,CAAC;EAC/BuM,MAAM;EACNzK;AACF,CAAC,CAAC;AACF/D,QAAQ,CAAC2M,IAAI,EAAE;EACb5J,CAAC;EACD+L,KAAK,EAAE9L,MAAM;EACbC,KAAK;EACL8L,QAAQ,EAAE7L,SAAS;EACnBC,IAAI;EACJC,MAAM;EACNC,MAAM;EACN2L,GAAG,EAAE1L,IAAI;EACT2L,IAAI,EAAE1L,KAAK;EACXC,GAAG;EACHE,QAAQ;EACRE,OAAO;EACPC,MAAM;EACNC,GAAG;EACHC,KAAK;EACLC,SAAS;EACT,GAAG,EAAEjB,CAAC;EACNkB,OAAO;EACPC,GAAG;EACHC,GAAG;EACHC,IAAI;EACJC,IAAI;EACJC,IAAI;EACJC,GAAG;EACHC,GAAG;EACHC,IAAI;EACJC,IAAI;EACJC,IAAI;EACJC,KAAK;EACLC,MAAM;EACNC,KAAK;EACLC,OAAO;EACPC,IAAI;EACJC,YAAY;EACZC,OAAO;EACPC,WAAW;EACXC,GAAG;EACHC,GAAG;EACHC,GAAG;EACHC,IAAI;EACJC,MAAM;EACNC,WAAW;EACXC,GAAG;EACHC,GAAG;EACHC,MAAM;EACNC,OAAO;EACPC,MAAM;EACNC,KAAK;EACLC,SAAS;EACTC,UAAU;EACVC,UAAU;EACVC,MAAM;EACNC,KAAK;EACLC,QAAQ;EACRC,SAAS;EACTC,GAAG;EACHC,KAAK;EACLC,GAAG;EACHC,IAAI;EACJC,GAAG;EACHC,QAAQ;EACRC,GAAG;EACHC,MAAM;EACNC,EAAE;EACFC,EAAE;EACFC,GAAG;EACHC,MAAM;EACNiG,OAAO;EACPhG,aAAa;EACbC,KAAK;EACLC,IAAI;EACJC,GAAG;EACHC,IAAI;EACJC,SAAS;EACTC,MAAM;EACNC,MAAM;EACNC,QAAQ;EACRC,IAAI;EACJC,MAAM;EACNC,OAAO;EACPC,IAAI;EACJC,KAAK;EACLC,SAAS;EACTC,KAAK;EACLC,MAAM;EACNqF,KAAK;EACLpF,mBAAmB;EACnBC,IAAI;EACJC,IAAI;EACJC,YAAY;EACZC,SAAS;EACTC,KAAK;EACLC,SAAS;EACTC,GAAG;EACHC,GAAG;EACHC,KAAK;EACLC,cAAc;EACdC,OAAO;EACPC,UAAU;EACVC,SAAS;EACTC,eAAe;EACfC,GAAG;EACHC,IAAI;EACJC,IAAI;EACJC,GAAG;EACHC,UAAU;EACVC,KAAK;EACLC,KAAK;EACLC,KAAK;EACLC,MAAM;EACNC,KAAK;EACLC,IAAI;EACJC,KAAK;EACLC,SAAS;EACTC,eAAe;EACfC,KAAK;EACLC,MAAM;EACNC,IAAI;EACJC,IAAI;EACJC,IAAI;EACJC,eAAe;EACfC,KAAK;EACLC,KAAK;EACLC,OAAO;EACPC,UAAU;EACVwE,IAAI,EAAEvE,KAAK;EACXC,QAAQ;EACRC,IAAI;EACJC,KAAK;EACLC,KAAK;EACLC,OAAO;EACPC,cAAc;EACdC,WAAW;EACXC,MAAM;EACNC,KAAK;EACLC,KAAK;EACLC,MAAM;EACNC,MAAM;EACNC,WAAW;EACXC,YAAY;EACZC,WAAW;EACXC,IAAI;EACJC,GAAG;EACH,IAAI,EAAE5E,EAAE;EACR6E,IAAI;EACJC,SAAS;EACTC,GAAG;EACHC,OAAO;EACPC,OAAO;EACPC,IAAI;EACJ+B,gBAAgB;EAChB9B,WAAW;EACXC,GAAG;EACHC,GAAG;EACHC,KAAK;EACLC,GAAG;EACHC,IAAI;EACJC,GAAG;EACHyB,KAAK;EACLC,OAAO;EACPC,YAAY;EACZC,OAAO;EACPC,QAAQ;EACRG,QAAQ;EACRC,UAAU;EACVhC,GAAG;EACHiC,WAAW;EACXC,IAAI;EACJC,MAAM;EACN5O;AACF,CAAC,CAAC;AACFD,QAAQ,CAAC4M,iBAAiB,EAAED,IAAI,EAAE;EAChCxB,MAAM,EAAEjJ,qBAAqB,CAAC;IAC5BqC,GAAG;IACHR,KAAK;IACLC;EACF,CAAC,CAAC;EACFyF,KAAK,EAAEtH,oBAAoB,CAAC;IAC1B6D,SAAS;IACTjC;EACF,CAAC,CAAC;EACF6B,MAAM,EAAExD,qBAAqB,CAAC;IAC5B2B;EACF,CAAC,CAAC;EACF8B,OAAO,EAAExD,sBAAsB,CAAC;IAC9B0B;EACF,CAAC,CAAC;EACF0C,GAAG,EAAEnE,kBAAkB,CAAC;IACtByB;EACF,CAAC,CAAC;EACF2C,IAAI,EAAEnE,mBAAmB,CAAC;IACxBgC,GAAG;IACHiB,MAAM;IACNzB;EACF,CAAC,CAAC;EACFF,MAAM,EAAErB,qBAAqB,CAAC,CAAC,CAAC,CAAC;EACjC8J,KAAK,EAAE7J,oBAAoB,CAAC;IAC1BY,MAAM;IACNkB,GAAG;IACHtE,MAAM;IACNiG,UAAU;IACVgE,MAAM;IACN7D,QAAQ;IACRoE,OAAO;IACPjD,SAAS;IACTzD;EACF,CAAC,CAAC;EACF6H,GAAG,EAAElJ,kBAAkB,CAAC;IACtB+D,GAAG;IACH4C,IAAI;IACJtF,KAAK;IACL6G;EACF,CAAC,CAAC;EACF2B,GAAG,EAAE5J,kBAAkB,CAAC;IACtB4B,GAAG;IACHtE,MAAM;IACNgM,OAAO;IACPlI;EACF,CAAC,CAAC;EACF0I,GAAG,EAAE7J,kBAAkB,CAAC;IACtB3C,MAAM;IACNiK,MAAM;IACN+B,OAAO;IACPlI;EACF,CAAC,CAAC;EACF2I,GAAG,EAAE7J,kBAAkB,CAAC;IACtB5C,MAAM;IACNgM,OAAO;IACPxB,OAAO;IACP1G;EACF,CAAC,CAAC;EACF6G,QAAQ,EAAE9H,uBAAuB,CAAC;IAChCyB,GAAG;IACHkF,KAAK;IACLjE,MAAM;IACNyE,KAAK;IACLrD,QAAQ;IACRe,QAAQ;IACR5D;EACF,CAAC;AACH,CAAC,CAAC;AACF/D,QAAQ,CAAC6M,OAAO,EAAE;EAChBpJ,KAAK;EACLE,SAAS;EACTmJ,KAAK;EACLC,IAAI;EACJC,UAAU;EACVC,SAAS;EACTC,cAAc;EACdE,UAAU;EACVC,YAAY;EACZC,cAAc;EACdC,SAAS;EACTE,eAAe;EACfC,YAAY;EACZC,SAAS;EACTC,YAAY;EACZC,YAAY;EACZC,sBAAsB;EACtBC,eAAe;EACfC,SAAS;EACTO,IAAI;EACJC;AACF,CAAC,CAAC;AACF1B,KAAK,CAACqC,WAAW,CAACxC,IAAI,CAAC;AACvB,SAASyC,YAAY,IAAIC,IAAI,QAAQ,4CAA4C"},"metadata":{},"sourceType":"module","externalDependencies":[]}